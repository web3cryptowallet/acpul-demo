### 1038 sys.llog

# livelogging [

livelog {
 a 502000;

 host {
  # u0, ip0-3,port
  io(_0, 501055, _5, 0,0,0);
  io(_0, a+7, _1,_2,_3,_4);
 };

 enable
  # u0, en
  io(_0, a+8, _1, 0,0,0);

 begin
  # u0, str
  io(_0, a+0, _1,0,0,0);
 end
  # u0
  io(_0, a+1, 0,0,0,0);

 print
  # u0, fmt
  io(_0, a+2, 0, _1, 0,0);
 printv
  # u0, fmt, v
  io(_0, a+2, 0, _1, 1, _2);
 printv2 {
  # u0, fmt, v0,v1
  io(_0, a+3, _3,0,0,0);
  io(_0, a+2, 0, _1, 2, _2);
 };
 printv3 {
  # u0, fmt, v0,v1,v2
  io(_0, a+3, _3,_4,0,0);
  io(_0, a+2, 0, _1, 3, _2);
 };
 printv4 {
  # u0, fmt, v0,v1,v2,v4
  io(_0, a+3, _3,_4,_5, 0);
  io(_0, a+2, 0, _1, 4, _2);
 };
 printo {
  # u0, fmt, mode, object||dma, i
  io(_0, a+3, _4,0,0,0);
  io(_0, a+4, 0, _1, _2, _3);
 };

 step
  # u0
  io(_0, a+5, _1,0,0,0);

 erase
  # u0, str
  io(_0, a+6, _1,0,0,0);

 b begin(u0, __);
 e end(u0, __);
 p print(u0, __);
 pv printv(u0, __);
 pv2 printv2(u0, __);
 pv3 printv3(u0, __);
 pv4 printv4(u0, __);
 po printo(u0, __);
};

llog livelog;

#llog.print(fmt);
#llog.printv(fmt, v);
#llog.printv2(fmt, v0, v1);
#llog.printo(fmt, o||dma);
#llog.pv2(value.is.one, v2);

# livelogging ]

### sys.livelog2

livelog2 {
 a 502200;

 core 0-42;

 new
  # u0, mode -> lid 
  # mode:
  #  0 - "/" & "." splitter
  #  1 - "/" splitter
  #  2 - "." splitter
  io(_0, a+0, _1, 0,0,0);

 put
  # u0, lid, path, msg, replace
  # path obj:str|buf|dma
  # path -1 - selected path
  io(_0, a+1, _1, _2, _3, _4);

 log
  # u0, lid, path, msg
  put(_0, _1, _2, _3, 0);
 replace
  # u0, lid, path, msg
  put(_0, _1, _2, _3, 1);

 get
  # u0, lid, path|node, buf, mode:0 -> node
  # u0, lid, path|node, buf, mode:1 -> buf:name
  # u0, lid, path|node, buf, mode:2 -> buf:msg
  io(_0, a+2, _1, _2, _3, _4);

 get.node
  # u0, lid, path -> node
  get(_0, _1, _2, 0, 0);

 get.name
  # u0, lid, path|node, buf -> buf:name
  get(_0, _1, _2, _3, 1);

 get.msg
  # u0, lid, path|node, buf -> buf:msg
  get(_0, _1, _2, _3, 2);

 get.children
  # u0, lid, path|node, buf, mode -> list.buf
  # mode 0 - nodes list
  # mode 1 - names only
  # mode 2 - full path
  # mode 3 - recursive full path only
  io(_0, a+3, _1, _2, _3, _4);

 erase
  # u0, lid, path|node
  io(_0, a+4, _1, 0,0,0);

 # ATTRIBUTE

 set.attribute
  # u0, lid, path|node, v, mode:0 -> 0
  # u0, lid, path|node, bid, mode:1 -> 0
  io(_0, a+11, _1, _2, _3, _4);

 get.attribute
  # u0, lid, path|node, 0, mode:0 -> v
  # u0, lid, path|node, bid, mode:1 -> bid
  io(_0, a+12, _1, _2, _3, _4);

 set.attribute.v set.attribute(_0,_1,_2,0);
 set.attribute.buf set.attribute(_0,_1,_2,1);
 get.attribute.v get.attribute(_0,_1,_2,0);
 get.attribute.buf get.attribute(_0,_1,_2,1);

 # PATH

 path {
  cursor 0-1;
  root 0-2345;

  select
   # u0, lid, mode, path, v0
   # mode: flags 8 2 1
   #  1: flag mode
   #   0 - start or path
   #   1 - relative
   #  2: flag child
   #   0 - select node
   #   1 - select child with index (v0)
   #  8: flag splitter
   #   0  - "/" spitter
   #   8 - "." dot splitter
   # path:
   #  "/abc" - start "abc"
   #  "abc" - relative "$P/abc"
   #  "/a/b" - start "a/b"
   #  "a.b" - relative "a.b"
   io(_0, a+5, _1, _1, _2, _3);

  push
   # u0, lid, str
   io(_0, a+6, _1, _2, 0,0);
  pop
   # u0, lid
   io(_0, a+7, _1, 0,0,0);

  get
    # u0, lid, buf -> path.buf
   io(_0, a+8, _1, 0,0,0);

 };

 # NAV

 root path.root;

 begin path.push(__);
 end path.pop(__);

 # EVENTS

 events.on
  # u0, lid, on
  io(_0, a+9, _1, _2, 0,0);

 # EXT

 printv
  # u0, lid, path, fmt, v
  io(_0, a+10, _1, _2, _3,_4);

};

llog2 livelog2;

