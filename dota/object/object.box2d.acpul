### dota.object.box2d

# BOX2D [

_ @1010;
_ @3200;
_ @sys.box2d;
bb box2d.body;

body0 l10;
shape0 l11;
fixture0 l12;
sensor0 0;

# CREATE BODY UNIT [

create.body.unit {
 bb.def0(u0, box2d.dynamic, x,y, 0);
 bb.def1(u0, 0,0, 0,0);
 bb.def3(u0, 0, 0,1,5);
 body0:=bb.create(u0, b2d.world);
# body.def.type.position.angle;
# body.def.velocity.linear.angular;
# body.def.damping.linear.angular.allowSleep.awake;
# body.def.fixed.rotation.bullet.active.gravity.scale;

 shape0:=box2d.shape.create.circle(u0);
 box2d.shape.set.radius(u0, shape0, 5);

 # Fixture friction, restitution, density, isSensor
 box2d.fixture.def(u0, 0.2, 0, 0, 0);
 fixture0:=box2d.fixture.create(u0, body0, shape0);
 box2d.fixture.filter.collision(u0, fixture0, 1,1+2, 0);
# box2d.fixture.filter.collision(u0, b1f1, 1,1+2, 0);

# box2d.body.set.position(u0, body0, x,y);
};

# CREATE BODY UNIT ]
# CREATE BODY BUILDING [

create.body.building {
 bb.def0(u0, box2d.static, x,y, 0);
 bb.def1(u0, 0,0, 0,0);
 bb.def3(u0, 0, 0,1,5);
 body0:=bb.create(u0, b2d.world);
# body.def.type.position.angle;
# body.def.velocity.linear.angular;
# body.def.damping.linear.angular.allowSleep.awake;
# body.def.fixed.rotation.bullet.active.gravity.scale;

# shape0:=box2d.shape.create.circle(u0);
# box2d.shape.set.radius(u0, shape0, 5);
 shape0:=box2d.shape.create.polygon(u0);
 box2d.shape.polygon.box(u0, shape0, 10,10);
# box2d.shape.polygon.box.a(u0, shape0, 10,10, 0,0, 0);


 # Fixture friction, restitution, density, isSensor
 box2d.fixture.def(u0, 0.2, 10, 0, 0);
 fixture0:=box2d.fixture.create(u0, body0, shape0);
 box2d.fixture.filter.collision(u0, fixture0, 2,1+2, 0);
};

create.tower.sensor {
 bb.def0(u0, box2d.static, x,y, 0);
 bb.def1(u0, 0,0, 0,0);
 bb.def3(u0, 0, 0,1,5);
 body0=bb.create(u0, b2d.world);

 shape0=box2d.shape.create.circle(u0);
 box2d.shape.set.radius(u0, shape0, 50);

 # Fixture friction, restitution, density, isSensor
 box2d.fixture.def(u0, 0.2, 0, 0, 1);
 fixture0=box2d.fixture.create(u0, body0, shape0);

# box2d.fixture.filter.collision(u0, b1f1, 1,1+2, 0);
 sensor0:=body0;
};

create.body.tower {
 create.body.building;
 create.tower.sensor;
};

# CREATE BODY BUILDING ]
# CREATE BODY [

if (r0) {
 if (type==types.unit) {
  if (subtype0==subtypes.bot) {
   building=1;
   if ((btype0==bots.types.minion.mage)
      + (btype0==bots.types.minion.guard)) {
    create.body.unit;
    building:=0;
   };
   if (btype0==bots.types.tower) {
    create.body.tower;
    building:=0;
   };
   if (building) {
    create.body.building;
   };
  };
  if (subtype0==subtypes.player) {
   create.body.unit;
  };
 };
};

if (type==types.unit) {
 sync.pos.to.body;
};

sync.pos.to.body {
 box2d.body.get.position(u0, body0);
 x:=o0;
 y:=o1;
};

_ @sys.events;

# BOX2D PROCESS EVENTS [

_ @dota.fly.box1;
_ @os.util2;

tb0=1;
while(tb0) {
 tb0:=events.pop(u0, box2d.e.pool, b2d.world);
 if (tb0==box2d.e.contact.begin) {
  # body0, body1
  body0=o0;
  fixture0=o1;
  body1=o2;
  fixture1=o3;

  nid1=box2d.body.data.get(u0, o0, 0);

  box2d.body.get.position(u0, body0);
  bx0=o0*3;
  by0=o1*3;

  fly.box1(bx0+10*rnd(u0),by0);

#  score=o0;
#  qq=qq+1;
#  score+=qq;

#  type=999; # gold

#  events.push(u0, pool.nebula,0, ev.add.score, score, type, bx0,by0);

#  node.set.visible(u0, nid1, 0);

#  fly0=fly.box1(0-10*rnd(u0)/2,0);
#  node.move.to.parent(u0, nid1, fly0);
 };
};

# BOX2D PROCESS EVENTS ]
# box2d event ]
# CREATE BODY ]
# BOX2D ]
