### dota.minimap.def

# MINIMAP [

_ @struct.def;
_ @sys.obj;

minimap {
 _ struct;

 width 256;
 height 256;

 scale 0.2;
 
# map0 0;
 objects0 0;

 new {
  # create 2d map
#  map0:=buffer.new(u0, w*h,w*h);

  # create objects
  objects0:=buffer.new(u0, 10000,10000);
 };

 add {
  # game.object
  buffer.append(u0, objects0,0, _0);
 };

 count {
  buffer.size(u0, objects0,0);
 };

 at {
  # i
  buffer.get(u0, objects0,0,_0);
 };

 pack pack4(objects0, width, height, 0);
 unpack unpack4(_0, objects0, width, height, 0);
};

# MINIMAP ]




### 19200 DOTA::minimap
# map
# 0: minimap

_ @basic.ui.shader.node3.inc;

draw(r0, 19201);



#y:=100;
#s:=0.5;
s:=1;
w:=200;
h:=200;

sn0 0;

parent0=node.get.parent(u0, nid);

parent.w node.prop.w.g(u0, parent0);
parent.h node.prop.h.g(u0, parent0);

location top.left;

if (location==top.left) {
 x:=0;
 y:=parent.h - h;
};

# MINIMAP0 [

_ @dota.minimap.def;
minimap0 r1;

if (r0) {
 minimap.new();
# minimap.add(1);
# minimap.add(1);
# minimap.add(1);

 minimap0:=minimap.pack;

 node.value.s(u0, nid,0, minimap0);

 new.ui.shader.node3(sn0, 0,00,1, w,h, 70014,29123); # dota.minimap.layers.bg
 node.value.s(u0, sn0,1, 1); # draw.off
# node.z.to.back(u0, sn0, -100);
 node.set.z.order(u0, sn0, 0-100);
 #node.set.z(u0, sn0, -100);
};


# MINIMAP0 ]

_ @4;

info {
lbl0 0; val0 0; ui.value4(lbl0,val0,0,h-10,1/2, MINIMAP, minimap0);
lbl0 0; val0 0; ui.value4(lbl0,val0,0,h-20,1/2, n.objects, minimap.count);

lbl0 0; val0 0; ui.value4(lbl0,val0,0,h-30,1/2, O0, minimap.at(0));
lbl0 0; val0 0; ui.value4(lbl0,val0,0,h-40,1/2, O1, minimap.at(1));
lbl0 0; val0 0; ui.value4(lbl0,val0,0,h-50,1/2, O14, minimap.at(14));
};
#info;



### 19201 DOTA::minimap.draw

color(u0, 0.2,0.2,0.2,0.85);
rect(u0, 6, 0,0,w,h);
color(u0, 0.7,0.7,0,0.95);
rect(u0, 2, 0,0,w,h);

_ @sys.node;
_ @os.util2;

obj @dota.object.types;

# DRAW OBJECTS - see Unit::Complex, refactor [

render.tower {
 x0=_0;
 y0=_1;
 sz=_2;
 b rect(u0, 6, x0+_0*sz,y0+_1*sz, _2*sz,_3*sz);
 b(1,0,3,3);
 b(0,3,1,1);
 b(2,3,1,1);
 b(4,3,1,1);
};

render.base {
 x0=_0;
 y0=_1;
 sz=_2;
 b rect(u0, 6, x0+_0*sz,y0+_1*sz, _2*sz,_3*sz);
 b(-1,0,7,3);
 b(0,3,1,1);
 b(2,3,1,1);
 b(4,3,1,1);
};

# DRAW OBJECTS - see Unit::Complex, refactor ]

_ @dota.minimap.def;
minimap0 r1;
minimap.unpack(minimap0);

count = minimap.count;
#count = 10;
i:=0;while(i<count) {
 oid = minimap.at(i);
 x = node.get.x(u0, oid);
 y = node.get.y(u0, oid);
# rect(u0, 6, 0+i*10,0+i*10,10,10);
 draw=1;
 color(u0, 1,1,1,1);

 type0=node.value.g(u0, oid,0);
 subtype0=node.value.g(u0, oid,1);
 btype0=node.value.g(u0, oid,2);
 team=node.value.g(u0, oid,3);

 if ((type0==obj.types.unit)*(subtype0==obj.subtypes.bot)) {
  if (btype0==obj.bots.types.tower) {
   if (team==obj.teams.blue) {
    color(u0, 1,1,0,1);
#    color(u0, 0,0,1,1);
   };
   if (team==obj.teams.red) {
    color(u0, 1,0,0,1);
   };
   render.tower(x*minimap.scale,y*minimap.scale, 2);
   draw:=0;
  };
  if (btype0==obj.bots.types.homebase) {
   if (team==obj.teams.blue) {
    color(u0, 0,1,1,1);
   };
   if (team==obj.teams.red) {
    color(u0, 1,0,0.5,1);
   };
   render.base(x*minimap.scale,y*minimap.scale, 2);
   draw:=0;
  };
 };

 if (draw) {
  rect(u0, 6, x*minimap.scale,y*minimap.scale,10/2,10/2);
 };
 i+=1;
};



### minimap.viewport

w:=100;
h:=100;



### minimap.viewport.draw

color(u0, 1,1,1,1);
rect(u0, 6, 0,0, w,h);


