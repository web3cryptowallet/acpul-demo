### dota.map.ground1

#_ @winamp.util;


_ @1111;
_ @sys.storage;
_ @os.util0;
_ @os.util2;
_ @basic.ui.shader.node3.inc;
_ @sys.shader.ex;

_ @load.texture;

new.ground {
# new.ui.shader.node3(sn0,  0,0,1, 200,200, 70014,28972); # dota.layer.ground2
# new.ui.shader.node3(sn0,  0,0,1, 200,200, 70014,28972); # dota.layer.ground2
 new.ui.shader.node3(sn0,  0,0,1/3, 1000,1000, 70014,28972); # dota.layer.ground2
 texx=node.value.g(u0, sn0,0);
# gl.texture.filter.nearest(texx);
 gl.texture.filter.linear(texx);

# new.ui.shader.node3(sn0,  0,0,1/3, 1000,1000, 70014,28973); # x dota.layer.ground3
# new.ui.shader.node3(sn0,  0,0,1, 200,200, 70014,28973); # x dota.layer.ground3

 shader.set.texture(sn0, A.iChannel0, tex99); # mask
 shader.set.texture(sn0, A.iChannel1, tex0);
 shader.set.texture(sn0, A.iChannel2, tex1);
 shader.set.texture(sn0, A.iChannel3, tex2);
 #shader.set.uniform.v(sn0, A.time1, 10*rnd(u0));
 #shader.set.uniform.v(sn0, A.time1, 10*rnd(u0));
};

new.layer.crystal2 {
 x0 150; y0 70;
 rq 100*2;
# rq 100*5;
# rq 1000*2;
# rq 1000*1;
 #rq 3; #0.5;
 new.ui.shader.node3(sn0,  x0,y0,1/3, 100,100, 70014,28975); # dota.layer.crystal2
# new.ui.shader.node3(sn0,  0,0,1/3, 1000,1000, 70014,28975); # dota.layer.crystal2
 shader.set.uniform.v(sn0, A.time, 10*rnd(u0));
 shader.set.uniform.v2(sn0, A.resolution, rq,rq);
 texx=node.value.g(u0, sn0,0);
 gl.texture.filter.linear(texx);
 shader.set.texture(sn0, A.iChannel0, tex3);
 shader.set.texture(sn0, A.iChannel1, tex99);
};

new.layer.crystal {
# new.ui.shader.node3(sn0,  0,0,1/3, 1000,1000, 70014,28974); # dota.layer.ground2
# new.ui.shader.node3(sn0,  0,0,1, 200,200, 70014,28974); # dota.layer.crystal1
 new.ui.shader.node3(sn0,  200,100,1/3/2, 200,200, 70014,28974); # dota.layer.crystal1
 shader.set.texture(sn0, A.iChannel0, tex1); # 
};

new.crunch1 {
 x0 200;
 y0 130;
# new.ui.shader.node3(sn0,  x0,y0+10,1/2, 100,100, 70014,28983); # dota.effect.star83
 hq 3;
# hq 0.1;

# new.ui.shader.node3(sn0, x0,y0,1/2, 100,100, 70014,28964); # dota.building.crunch
# new.ui.shader.node3(sn0, x0,y0,1/4, 200,200, 70014,28964); # dota.building.crunch
 new.ui.shader.node3(sn0, x0,y0,1/2/hq, 100*hq,100*hq, 70014,28964); # dota.building.crunch
 shader.set.uniform.v(sn0, A.time, 10); # 
# shader.set.texture(sn0, A.iChannel0, tex3); # 
 shader.set.texture(sn0, A.iChannel0, tex1); # 
 hq 2;
# new.ui.shader.node3(sn0,  x0,y0+10,1/2, 100,100, 70014,28983); # dota.effect.star83
 new.ui.shader.node3(sn0,  x0,y0+25,1/2/hq, 100*hq,100*hq, 70014,28983); # dota.effect.star83
};

new.crunch2 {
# x0 140;
# y0 140;
# s0 1/1.5;
 x0 110;
 y0 100;
 s0 1;
 hq 0.5;
# new.ui.shader.node3(sn0,  x0,y0-10,1/(2-1), 100,100, 70014,28983); # dota.effect.star83
 new.ui.shader.node3(sn0,  x0,y0+12,s0/hq, 100*hq,100*hq, 70014,28983); # dota.effect.star83
 texx=node.value.g(u0, sn0,0);
# gl.texture.filter.nearest(texx);
 gl.texture.filter.linear(texx);

 hq 2;
 new.ui.shader.node3(sn0, x0,y0,s0/hq, 100*hq,100*hq, 70014,28952); # dota.building.crunch
 texx=node.value.g(u0, sn0,0);
 gl.texture.filter.nearest(texx);
# gl.texture.filter.linear(texx);
 shader.set.uniform.v(sn0, A.time, 10); # 
# shader.set.texture(sn0, A.iChannel0, tex3); # 
 shader.set.texture(sn0, A.iChannel0, tex1); # 
# new.ui.shader.node3(sn0,  x0,y0+20,1/2, 100,100, 70014,28983); # dota.effect.star83
};

new.egg1 {
 x0 _0; y0 _1; s0 _2;
# x0 100-20; y0 150; s0 1/4;
 new.ui.shader.node3(sn0, x0,y0,s0, 100-20,100, 70014,28991); # dota.
# texx=node.value.g(u0, sn0,0);
# gl.texture.filter.nearest(texx);
# gl.texture.filter.linear(texx);
 shader.set.uniform.v(sn0, A.time, 10*rnd(u0)); # 
# shader.set.texture(sn0, A.iChannel0, tex3); # 
# shader.set.texture(sn0, A.iChannel0, tex0); # 
 shader.set.texture(sn0, A.iChannel0, tex99); # 
 shader.set.texture(sn0, A.iChannel1, tex4); # 
};

tex0 0;
tex1 0;
tex2 0;
tex3 0;

tex4 0;

tex99 0; # mask grass1

sn0 0;

if (r0) {
# load.texture(tex0, 11001,1,1);
# load.texture(tex0, 11001,1,2);
# load.texture(tex0, 11001,1,3);

a {
 load.texture(tex99, 11001,1,2); # mask grass1
 load.texture(tex0, 11001,1,4); # ground.grass1
 load.texture(tex1, 11001,2,5); # ground.gold
 load.texture(tex2, 11001,6,3); # ground.rocks
};

# load.texture(tex99, 11001,1,1); # mask grass1
 load.texture(tex99, 11001,1,2); # mask grass1
 load.texture(tex99, 11001,1,3); # mask grass1

 load.texture(tex0, 11001,1,4); # ground.grass1
 load.texture(tex1, 11001,2,5); # ground.gold
# load.texture(tex2, 11001,3,1); # ground.marble

# load.texture(tex2, 11001,4,6); # ground.sand
# load.texture(tex0, 11001,4,6); # ground.sand

# load.texture(tex0, 11001,5,4); # ground.forest
# load.texture(tex2, 11001,5,4); # ground.forest
 load.texture(tex4, 11001,6,3); # ground.rocks
# load.texture(tex2, 11001,7,2); # ground.grass7

 load.texture(tex2, 11001,8,5); # ground.road
# load.texture(tex2, 11001,8,5); # ground.paving.stones

# load.texture(tex2, 11001,9,4); # ground.bricks9
# load.texture(tex2, 11001,10,5); # ground.rocks10 1024x512
# load.texture(tex2, 11001,11,6); # ground.rocks11 1024x512

# load.texture(tex0, 11001,12,1); # ground.pattern1
# load.texture(tex0, 11001,12,2); # ground.pattern2
# load.texture(tex0, 11001,12,3); # ground.pattern3

 new.ui.shader.node3(sn0, 260,0,1/3, 300,300, 70014,29103); # dota.map.alien.terrain
 shader.set.uniform.v2(sn0, A.offs, 0.5,0.1);
 tex0:=node.value.g(u0, sn0,0);


 new.ground;
 new.layer.crystal;
 
 new.layer.crystal2;

 new.crunch1;
 new.crunch2;

 new.ui.shader.node3(sn0,  0,0,1/3, 500,500, 70014,28984); # dota.effect.lighting
 new.ui.shader.node3(sn0,  120/3,400/3,1/3, 200/2,200/2, 70014,28985); # dota.portal85

 new.ui.shader.node3(sn0,  120/3,400/3,1/3, 200/2,200/2, 70014,28986); # dota.frac86
 shader.set.uniform.v(sn0, A.time, 10*rnd(u0));

 tex80toad 0; # 561x412
 load.texture(tex80toad, 11002,0,1); # hypnotoad

 new.ui.shader.node3(sn0,  100-30+20,100+50+20,1/3/1.5, 561/2,412/2, 70014,28987); # dota.hypnotoad
 shader.set.texture(sn0, A.iChannel0, tex80toad); # 

# new.ui.shader.node3(sn0,  180,110,1, 25/2,50/2, 70014,28970); # dota.fire70

 new.ui.shader.node3(sn0,  200-3,140,1, 25/2,50/2, 70014,28970); # dota.fire70
 new.ui.shader.node3(sn0,  240,140,1, 25/2,50/2, 70014,28970); # dota.fire70

 # BASE [

 new.ui.shader.node3(launch.base0,  110,0,1/3, 300,300, 70014,28988); # dota.building.launch
 shader.set.uniform.v(launch.base0, A.time, 10);
# shader.set.uniform.v(sn0, A.time, 10*rnd(u0));

# new.ui.shader.node3(sn0, 100,100,1/4, 1300/3,1300/3, 70014,28557); # starship7
# new.ui.shader.node3(sn0, 100,100,1/4, 1300/3,1300/3, 70014,28419); # starship1
 starship.new;

 new.ui.shader.node3(sn0,  200,0,1/3, 200,200, 70014,28993); # dota.building.container

 # BASE

 new.ui.shader.node3(sn0,  60,135,1/3, 200,200, 70014,28989); # dota.ghost89
 shader.set.uniform.v(sn0, A.time, 10);

 # XCOIN TEST [

# xcoin;

 xcoin.starship;

 # XCOIN TEST ]
 # DIALOG TEST [

 _ @dota.dialog.inc;
# new.dialog.hero(sn0, 0,0,1/5, 1024,768, 9); # 

 # DIALOG TEST ]


# new.ui.shader.node3(sn0, 100,0,1/3, 300/2,300/2, 70014,28994); # dota.droid.bb9

 new.destroyer(150,70,1/3, 300,300);


 # Good alien map
# new.ui.shader.node3(sn0, 260,0,1/3, 300,300, 70014,29103); # dota.map.alien.terrain
# shader.set.uniform.v2(sn0, A.offs, 0.5,0.1);

# new.ui.shader.node3(sn0, 260,0,1/3, 300,300, 70014,29104); # dota.alien.egg04
# new.ui.shader.node3(sn0, 260,80,1/3, 300/2,300/2, 70014,28998); # dota.alien.enemy

 new.eggs1;
};

# EGGS [

 new.eggs1 {
  i=0;while(i<15){
   new.egg1(220+rnd(u0)*30,30+rnd(u0)*30,1/4-rnd(u0)*1/8);
   i+=1;
  };
 };

# EGGS ]
# XCOIN [

_ @dota.xcoin;

 xcoin0 xcoin.starship;
# xcoin0 xcoin;

# tex0boot0 u13; tex0boot1 u14;
# tex0boot1:=xcoin0.tex11; tex0boot0:=xcoin0.tex11;


shader.set.uniform.v(xcoin0.sn0, A.time, t*2);
t+=dt;

# XCOIN ]
# SPACE [

_ @dota.space.spaceport;

_ @dota.space.destroyer;

# SPACE ]

add.coin {
 _ @dota.fly.box2;
 s0 3;
 box0=fly.box1(dock0.x-1*rnd(u0)/2+20,dock0.y+dock0.h/s0/2);
};

#add.coin;

# STARSHIP ]

_ @4;
lbl0 0; val0 0; ui.value4(lbl0,val0,20,5,0.3, A.starship.direction, starship.direction);
lbl0 0; val0 0; ui.value4(lbl0,val0,20,10,0.3, A.starship.t, starship.t0);
lbl0 0; val0 0; ui.value4(lbl0,val0,20,15,0.3, A.starship.height0, starship.height0);
lbl0 0; val0 0; ui.value4(lbl0,val0,20,20,0.3, A.starship.velocity0, starship.velocity0);

#  new.ui.shader.node3(starship0, x,y,1/2, 100/1,300/1, 70014,28992); # dota.starship92
#  shader.set.uniform.v(starship0, A.time, 0);

### dota.starship

